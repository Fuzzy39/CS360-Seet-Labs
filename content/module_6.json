{
    "name" : "module_6",
    "title" : "Module 6: Exception Handling",
    "number" : 6,
    "activity_count" : 4,
    "content" : {
        "activity1": {
            "name": "Reading 6",
            "id": "6-1",
            "type": "reading_activity",
            "content": {
                "1t": "Exception Handling",
                "2h1": "Understanding Exceptions",
                "2p": "Exceptions are unexpected events during program execution. In Java, an exception is an object that represents an error or unusual condition. By handling exceptions, you can prevent crashes and provide meaningful feedback. Exception handling allows the flow of execution to continue gracefully, instead of terminating the program abruptly. It also makes your code more robust and easier to debug, as you can include descriptive messages and actions to take when an error occurs.",
                "3h1": "Try-Catch-Finally",
                "3p": "Use %ktry%/k to wrap code that may throw exceptions, %kcatch%/k to handle specific exception types, and %kfinally%/k for cleanup:%ctry {%n%t// risky code%n} catch (IOException e) {%n%t// handle I/O error%n} finally {%n%t// always runs%n}%/c This structure ensures that resources like file streams or database connections can be closed properly, even if an error occurs. You can include multiple %kcatch%/k blocks to handle different exception types separately. The %kfinally%/k block is optional, but it's a great place for releasing resources regardless of success or failure.",
                "4h1": "Throwing Exceptions",
                "4p": "You can explicitly throw exceptions using %kthrow%/k. This is useful for validating input or signaling errors:%cthrow new IllegalArgumentException(%'Invalid input%');%/c Throwing exceptions gives you control over error reporting and lets you notify callers when something goes wrong. It's especially useful in public APIs, where you want to ensure users provide valid input. By throwing an exception, you're enforcing correct usage and promoting defensive programming.",
                "5h1": "Declaring Exceptions (throws)",
                "5p": "Methods that can throw checked exceptions must declare them with %kthrows%/k in the signature:%cpublic void readFile(String path) throws IOException {%n%t// read file%n}%/c This alerts callers to handle or further declare the exception. It makes your method's contract clearer and helps tools like IDEs and compilers enforce proper handling. Declaring exceptions is especially important in large systems, where multiple layers of code may interact and propagate exceptions.",
                "6h1": "Checked vs Unchecked",
                "6p": "%bChecked exceptions%/b (subclasses of Exception) must be handled or declared. %bUnchecked exceptions%/b (subclasses of RuntimeException) can occur anywhere and need not be declared. Use checked for recoverable conditions, unchecked for programming errors. Examples of checked exceptions include %kIOException%/k and %kSQLException%/k. Unchecked exceptions include %kNullPointerException%/k and %kArrayIndexOutOfBoundsException%/k. Use them thoughtfully to indicate whether an issue should be fixed in the code or recovered from at runtime.",
                "7h1": "Custom Exceptions",
                "7p": "Define your own exceptions by extending %bException%/b or %bRuntimeException%/b:%cpublic class MyException extends Exception {%n%tpublic MyException(String msg) {%n%t%tsuper(msg);%n%t}%n}%/c Custom exceptions improve clarity and error categorization. They let you describe specific failure modes in your application, like %kInsufficientFundsException%/k in a banking app. This makes your code easier to understand and test, and lets you handle related errors in a consistent way throughout the codebase.",
                "8h1": "Best Practices",
                "8p": "- Catch the most specific exception first, then broader types.%n- Avoid empty catch blocksâ€”always handle or log errors with meaningful messages.%n- Use %kfinally%/k or try-with-resources for resource cleanup, ensuring no leaks even when exceptions occur.%n- Document thrown exceptions in method comments so users of your code know what to expect.%n- Prefer unchecked exceptions for programming logic errors where recovery is unlikely, such as illegal arguments or unsupported operations. Clean exception handling leads to more stable and user-friendly applications."
            }
        },
        "activity2": {
            "name": "Coding 6",
            "id": "6-3",
            "type": "coding_activity",
            "content": {
                "context": {
                    "1h1": "Handling Exceptions",
                    "1p": "In this activity, you're going to write a method that divides two integers and throws an %kIllegalArgumentException%/k if the divisor is zero. Then you'll handle this exception in a test method using a %ktry-catch%/k block. If an exception is caught, return the exception message. Otherwise, return the result as a string."
                },
                "base_code": "public class Lab {%n%n%tpublic static int divide(int a, int b) {%n%t%tif (b == 0) {%n%t%t%tthrow new IllegalArgumentException(%'Cannot divide by zero%');%n%t%t}%n%t%treturn a / b;%n%t}%n%n%tpublic static String runTests(int a, int b) {%n%t%ttry {%n%t%t%tint result = divide(a, b);%n%t%t%treturn String.valueOf(result);%n%t%t} catch (IllegalArgumentException e) {%n%t%t%treturn e.getMessage();%n%t%t}%n%t}%n}",
                "output_type": "input output",
                "number_test_cases": 3,
                "test_cases": {
                    "case_1": {"input": "10%n2", "output": "5"},
                    "case_2": {"input": "9%n0", "output": "Cannot divide by zero"},
                    "case_3": {"input": "100%n4", "output": "25"}
                }
            }
        },
        "activity3" : {
            "name" : "Quiz 6",
            "id" : "6-4",
            "type" : "quiz_activity",
            "content" : {
                "question1" : {
                    "type" : "multiple choice",
                    "question" : "Which keyword declares that a method may throw a checked exception?",
                    "options" : {"1" : "throw","2" : "throws","3" : "try","4" : "catch"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. 'throw' raises an exception instance.",
                        "2" : "Correct! 'throws' declares checked exceptions.",
                        "3" : "'try' starts a block for catching exceptions.",
                        "4" : "'catch' handles exceptions, not declares them."
                    }
                },
                "question2" : {
                    "type" : "true false",
                    "question" : "True/False: Unchecked exceptions must be declared in the method signature.",
                    "options" : {"1" : "True","2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. Unchecked exceptions need not be declared.",
                        "2" : "Correct! Only checked exceptions require declaration."
                    }
                }
            }
        }
    }
}
