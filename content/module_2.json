{
    "name" : "module_2",
    "title" : "Module 2: Control Flow",
    "number" : 2,
    "activity_count" : 4,
    "content" : {
        "activity_1" : {
            "name" : "Reading 3 : Control Flow",
            "id" : "2-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Control Flow",
                "2h1" : "Conditionals",
                "2p" : "Programs don't just execute line by lineâ€”they make decisions! %bConditionals%/b allow us to control which code runs based on certain conditions. In Java, we use %kif%/k statements to check conditions. The simplest %kif%/k statement is written like this: %cif(condition) result;%/cThe %kif%/k keyword introduces a conditional. The condition inside the parentheses must evaluate to a boolean, that is, %ktrue%/k or %kfalse%/k. If the condition is %ktrue%/k, then the result is executed. Otherwise, nothing happens and the program continues to the next line. Even though this very simple %kif%/k statement is fine when there's only one line to be run inside the conditional, it's almost always best to use curly braces like this: %cif (temperature > 30) { %n%tSystem.out.println(%'It's hot outside!%'); %n}%/c This way, we can include several lines of code inside the conditional statement, and it's more clear what's included and what's not.%nWe can extend our decision-making with %kelse if%/k and %kelse%/k clauses to handle multiple scenarios. Look at this program, and see if you can guess its output:%cint my_race_time = 59;%nint record_race_time = 51;%nSystem.out.println(%'Your time was: %' + my_race_time + %' seconds%');%nif (my_race_time < 55) {%n%tSystem.out.println(%'Wow! That was fast!%');%n}%nelse if (my_race_time < 60) {%n%tSystem.out.println(%'Excellent!%');%n}%nelse if (my_race_time < 70) {%n%tSystem.out.println(%'Good!%');%n}%nelse {%n%tSystem.out.println(%'You finished the race!%');%n}%nif (my_race_time < record_race_time) {%n%tSystem.out.println(%'A new record!!%');%n}%nelse {%n%tSystem.out.println(%'You were %' + (record_race_time - my_race_time) + %' seconds slower than the record.%');%n}%/cIn this example, the output will be:%n%kYour time was: 59 seconds%nExcellent!%nYou were 8 seconds slower than the record%/k%nUsing %kif%/k, %kelse if%/k, and %kelse%/k blocks, we can implement all kinds of conditional behavior.",
                "3h1" : "Looping",
                "3p" : "Sometimes, we need to repeat actions %bmultiple times%/b. Loops help us avoid writing the same code over and over. This makes code more %breusable%/b and expands the type of things we're able to do with our programs.",
                "4h1" : "While Loops: One more time!",
                "4p" : "The %kwhile%/k loop repeats as long as a condition is true: %cint count = 0;%nwhile (count < 5) { %n%tSystem.out.println(count); %n%tcount++; %n}%/cIn this case, the body of the loop will be executed 5 times, once each when count is equal to 0, 1, 2, 3, and 4. When count becomes 5, the loop breaks since count is not less than 5. Here's another example of a while loop. Try and guess what this code is doing, and also what the output will be:%cint value = 0;%nwhile (value * value <= 100) {%n%tvalue++;%n}%nSystem.out.println(value);%/cThis code searches for some value which has a square greater than 100. The first integer which fulfils this condition is 11.",
                "5h1" : "For Loops: A range of possibilities!",
                "5p" : "The %kfor%/k loop is perfect when you know exactly how many times you want the code to be run. Here's an example of looping on a %brange%/b: %cfor (int i = 0; i <= 5; i++) { %n%tSystem.out.println(i); %n}%/cThis code will print all the integers between 0 and 5. The %kfor%/k loop is defined by three statements, separated by semicolons (';').%nThe first is the %bInitialization%/b, where we can create variables to be used inside the loop. In the loop above, %kint i = 0%/k creates a variable called i with an initial value of 0. Most commonly, these are single-letter variables starting alphabetically with i, then j, and so on if needed (some programmers choose to use 'ii' instead of 'j'. Always make your code as understandable as possible!). Remember when we talked about variable %bscope%/b? These loop variables are scoped only to the inside of the loop: they're destroyed as soon as the loop breaks.%nThe second statement is the %bCondition%/b, which tells the code when to continue and when to exit or break. This looks the very same as the conditional inside an %kif%/k or %kwhile%/k block. Once the condition becomes false, the loop exits. In the example above, the condition is %ki <= 5%/k. Once this condition is false (when i is 6 or above), the loop will stop executing. Note that the condition will only be evaluated %iafter%/i a loop is complete.%nFinally, there is the %bIncrement%/b. This tells the loop what should change after each iteration. In the above example, %ki++%/k means that I should be incremented, or 1 added to it, after each loop execution. Like the condition, this will only be evaluated %iafter%/i the whole loop has been run.%nTechnically, you could leave any one of these statement out of the loop. If you don't want to initialize any variables, check a condition, or increment a value, you can put nothing between the semicolons at all! The following code results in an infinite loop, since there is no condition to end the looping:%cfor (;;) { ... }%/c",
                "6h1" : "Do-While Loops: Guaranteed Fun!",
                "6p" : "What if we want to use a loop, but we want to ensure the body is executed at least once? The %kdo-while%/k loop runs the code before it checks conditions, that way at least one execution is performed: %cint i = 0;%ndo { %n%tSystem.out.println(i); %n%ti++; %n} while (i < 5);%/c In this example, the loop will run once for i = 0, 1, 2, 3, 4 %iand%/i 5. The loop will only check if i is greater than 5 after the body is executed. Here's an example where the benefits of a %kdo-while%/k loop are used: %cint numPeople = 1;%ndo {%n%tSystem.out.println(%'Welcome!%');%n%tnumPeople--;%n} while (numPeople > 0);%/cIn this example, even though the condition is false once we reach the end of the loop, the code was run one time. %kDo-While%/k loops are like someone who insists on trying every flavor before choosing a favorite!",
                "7h1" : "Understanding Loops",
                "7p" : "The %kfor%/k loop and the %kwhile%/k loop are closely related: they could be siblings! Every %kfor%/k loop can be rewritted as a %kwhile%/k loop:%cfor (int i = 10; i > 0; i--) { ... }%/c Is really the same as:%cint i = 10;%nwhile (i > 0) {%n%t...%n%ti--;%n}%/cSo, why do we use %kfor%/k loops? Well, %kfor%/k loops have a much more %bconcise%/b syntax: almost every programmer would prefer to read a %kfor%/k loop than a %kwhile%/k loop, even when they theoretically do the same thing. Each has their own use, but %bclarity%/b and %breadability%/b are key in everything. Learn to use these loops well, and they'll be excellent tools.",
                "8h1" : "Advanced Looping (For-Each)",
                "8p" : "Sometimes, we just want to loop %bthrough every item%/b in a collection without the hassle of managing indexes. The %kfor-each%/k loop makes this easy: %cint[] numbers = {1, 2, 3, 4, 5};%nfor (int num : numbers) { %n%tSystem.out.println(num); %n}%/c Each entry in the array will be printed in this example. It's quick, clean, and gets you on with the fun stuff. We'll return to %kfor-in%/k loops when we talk about Collections in a later module.",
                "9h1" : "Break and Continue: Controlling Loops",
                "9p" : "Want to exit out of a loop early? Use %kbreak%/k to exit the loop like you'd like to escape a boring meeting: %cfor (int i = 0; i < 10; i++) { %n%tif (i == 5) { %n%t%tbreak; %n%t} %n%tSystem.out.println(i); %n}%/c Even though the condition is true when i equals 5, the inner break will be encountered and the loop will stop before printing 5. Here's another case: imagine you want to skip a part of the loop and move on, rather than completing all the rest of the body. Use %kcontinue%/k for this kind of functionality: %cfor (int i = 0; i < 10; i++) { %n%tif (i %% 2 == 0) { %n%t%tcontinue; %n%t} %n%tSystem.out.println(i); %n}%/c In this code, 2 will not be print out, but 3, 4, and so on will be. Using %kbreak%/k statements is like skipping past the boring part of a movie!",
                "10h1" : "Nested Loops and Conditionals",
                "10p" : "We can %bnest%/b loops and conditionals inside each other to tackle complex problems. For example: %cfor (int i = 0; i < 3; i++) { %n%tfor (int j = 0; j < 3; j++) { %n%t%tSystem.out.println(%'i: %' + i + %' j: %' + j); %n%t} %n}%/c This is when you might want to use 'j' as an index like we talked about before. In this code, the inner loop will be fully executed for each time the outer loop is run. A total of 9 lines will be print by this code.%nBeware! nesting too many loops can make your code as tangled as a bowl of spaghetti! And nested conditionals? They're like decision trees in a magical forest- it's easy to lose the path: %cif (score >= 90) { %n%tif (bonus) { %n%t%tSystem.out.println(%'A+%'); %n%t} else { %n%t%tSystem.out.println(%'A%'); %n%t} %n}%/c There are certainly uses for nested conditionals, but you should be careful to make your code clear and readable."
            }
        },
        "activity_2": {
            "name": "Coding 2: Conditionals and Loops",
            "id": "2-2",
            "type": "coding_activity",
            "content": {
                "context": {
                    "1h1": "Practice with Control Flow",
                    "1p": "You've learned how Java uses conditionals and loops to control the flow of a program. In this activity, we'll solve a classic coding problem called FizzBuzz. Use a %kfor%/k or %kwhile%/k loop with a range from 0 to 100 (including 0 and 100). If the number is divisible by both 5 and 3, print %'FizzBuzz%'. If it is divisible only by 5, print %'Fizz%'. If divisible only by 3, print %'Buzz%'. If divisible by neither, print the number itself. Make sure your output matches these instructions exactly. Use conditionals to implement this behavior.%nHINT: To check if one number is a factor of another, use the modulo %k%%%/k operator. %kX %% Y == 0%/k is true if Y is a factor of X."
                },
                "base_code": "public class Lab {%n%tpublic static void fizzBuzz() {%n%t%t// Write your code below%n%t%t%n%t}%n}",
                "launcher": "ConsoleLauncher",
                "number_test_cases": 1,
                "test_cases": {
                    "case_1": {
                        "input": [],
                        "output" : {
                            "type" : "String",
                            "value" : "FizzBuzz 1 2 Buzz 4 Fizz Buzz 7 8 Buzz Fizz 11 Buzz 13 14 FizzBuzz 16 17 Buzz 19 Fizz Buzz 22 23 Buzz Fizz 26 Buzz 28 29 FizzBuzz 31 32 Buzz 34 Fizz Buzz 37 38 Buzz Fizz 41 Buzz 43 44 FizzBuzz 46 47 Buzz 49 Fizz Buzz 52 53 Buzz Fizz 56 Buzz 58 59 FizzBuzz 61 62 Buzz 64 Fizz Buzz 67 68 Buzz Fizz 71 Buzz 73 74 FizzBuzz 76 77 Buzz 79 Fizz Buzz 82 83 Buzz Fizz 86 Buzz 88 89 FizzBuzz 91 92 Buzz 94 Fizz Buzz 97 98 Buzz Fizz "
                        }
                    }
                }
            }
        },
        "activity_3" : {
            "name" : "Quiz 2: Control Flow",
            "id" : "2-3",
            "type" : "quiz_activity",
            "content" : {
                "1" : {
                    "type" : "multiple choice",
                    "question" : "Which loop is usually the best to use when you know exactly how many times to iterate?",
                    "options" : {
                        "1" : "while",
                        "2" : "for",
                        "3" : "do-while",
                        "4" : "foreach"
                    },
                    "correct_responses" : [
                        "2"
                    ],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Not quite. While loops are great when we don't know how many times we need to loop.",
                        "2" : "Correct! The for loop is best when we know the exact number of iterations.",
                        "3" : "Do-while loops ensure at least one iteration but are not necessarily best when we know the count.",
                        "4" : "The for-each loop is great for collections but not for a fixed number of iterations."
                    }
                },
                "2" : {
                    "type" : "true false",
                    "question" : "True/False: The 'break' statement skips the rest of the current loop iteration and moves to the next one.",
                    "options" : {
                        "1" : "True",
                        "2" : "False"
                    },
                    "correct_responses" : [
                        "2"
                    ],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. 'break' completely exits the loop, while 'continue' skips to the next iteration.",
                        "2" : "That's right! 'break' stops the loop entirely, while 'continue' moves to the next iteration."
                    }
                }
            }
        }
    }
}
