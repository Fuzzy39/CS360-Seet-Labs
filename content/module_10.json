{
    "name" :  "module_10",
    "title" :  "Module 10: Recap and Review",
    "number" :  10,
    "activity_count" :  3,
    "content" :  {
        "activity_1" :  {
            "name" :  "Reading 10",
            "id" :  "10-1",
            "type" :  "reading_activity",
            "content" :  {
                "1t" :  "Final Review: Key Java Concepts",
                "2h1" :  "Core Syntax and Control Flow",
                "2p" :  "We began with Java's foundational syntax: variables, data types, operators, and control flow. You learned how to use conditional statements (%kif%/k, %kswitch%/k) and loops (%kfor%/k, %kwhile%/k) to control execution. Understanding scope and the flow of logic in methods sets the stage for structured programming.",
                "3h1" :  "Methods, Parameters, and Recursion",
                "3p" :  "You explored defining and calling methods, passing arguments, returning values, and the importance of the call stack. Recursion was introduced as a powerful technique for solving problems that can be broken into smaller subproblems, such as calculating factorials or navigating trees.",
                "4h1" :  "Object-Oriented Programming",
                "4p" :  "OOP is central to Java. You studied classes, objects, encapsulation, and the use of constructors and instance variables. Key principles—inheritance, polymorphism, and abstraction—enable code reuse and modular design. You also learned to override methods, use the %ksuper%/k keyword, and work with the Object base class.",
                "5h1" :  "Interfaces, Abstract Classes, and Design",
                "5p" :  "Interfaces and abstract classes were compared as ways to enforce structure in code while enabling flexibility. Design tips encouraged favoring composition over inheritance, using polymorphism for extensibility, and structuring code with clear contracts and reuse in mind.",
                "6h1" :  "Exception Handling",
                "6p" :  "Java's robust error handling involves %ktry%/k, %kcatch%/k, %kfinally%/k, and the use of %kthrow%/k and %kthrows%/k. You practiced catching specific exceptions, declaring methods that can throw checked exceptions, and using custom exception classes. Try-with-resources ensures clean file or stream handling.",
                "7h1" :  "Input and Output",
                "7p" :  "You learned console input via %kScanner%/k, character and byte stream handling, file reading/writing with %kBufferedReader%/k and %kFileWriter%/k, and object serialization with %kObjectOutputStream%/k. We emphasized best practices for exception-safe I/O, character encoding, and NIO.2 utilities.",
                "8h1" :  "Arrays and Collections",
                "8p" :  "Arrays provided fixed-size storage with direct indexing, while collections (like %kArrayList%/k, %kHashSet%/k, and %kHashMap%/k) offered dynamic, flexible alternatives. You practiced iterating with %kfor-each%/k loops and %kIterator%/k, using %kCollections%/k and %kArrays%/k utility classes, and choosing the right structure for your data.",
                "9h1" :  "Advanced Structures and Generics",
                "9p" :  "You tackled stacks, queues, deques, trees, and compared %kLinkedList%/k and %kArrayList%/k. Generics enabled you to write type-safe, reusable code with wildcards and bounded parameters. You built generic classes and methods to handle a variety of types with a single implementation.",
                "10h1" :  "Putting It All Together",
                "10p" :  "By combining these topics, you're prepared to design robust, maintainable, and scalable Java programs. From handling user input to managing complex data with generics, you've seen how Java supports clean, efficient software development."
            }
        },
        "activity_2" :  {
            "name" :  "Quiz 10",
            "id" :  "10-2",
            "type" :  "quiz_activity",
            "content" :  {
                "1" : {
                    "type" : "multiple choice",
                    "question" : "What keyword is used to define a class in Java?",
                    "options" : {"1" : "function", "2" : "define", "3" : "class", "4" : "public"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {"3" : "Correct! 'class' is the keyword to define a class."}
                },
                "2" : {
                    "type" : "true false",
                    "question" : "True/False: A 'while' loop always runs at least once.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {"2" : "Correct! Unlike 'do-while', 'while' might never run."}
                },
                "3" : {
                    "type" : "multiple choice",
                    "question" : "What is the return type of a method that doesn't return anything?",
                    "options" : {"1" : "null", "2" : "void", "3" : "None", "4" : "return"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {"2" : "Correct! 'void' means no return value."}
                },
                "4" : {
                    "type" : "multiple choice",
                    "question" : "Which term best describes using the same method name with different parameters?",
                    "options" : {"1" : "Inheritance", "2" : "Overriding", "3" : "Overloading", "4" : "Encapsulation"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {"3" : "Correct! Overloading allows multiple method signatures."}
                },
                "5" : {
                    "type" : "true false",
                    "question" : "True/False: Constructors have the same name as their class.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {"1" : "Correct! Constructors match the class name."}
                },
                "6" : {
                    "type" : "multiple choice",
                    "question" :  "Which principle of OOP hides internal details?",
                    "options" : {"1" : "Abstraction", "2" : "Polymorphism", "3" : "Inheritance", "4" : "Encapsulation"},
                    "correct_responses" : ["4"],
                    "points" : 10,
                    "feedback" : {"4" : "Correct! Encapsulation hides implementation details."}
                },
                "7" : {
                    "type" : "multiple choice",
                    "question" : "Which keyword is used to create an interface in Java?",
                    "options" : {"1" : "class", "2" : "abstract", "3" : "interface", "4" : "object"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {"3" : "Correct! 'interface' defines an interface."}
                },
                "8" : {
                    "type" : "multiple choice",
                    "question" : "Which block, when defined, always executes fully in exception handling?",
                    "options" : {"1" : "try", "2" : "catch", "3" : "throw", "4" : "finally"},
                    "correct_responses" : ["4"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Not what we're looking for. While a 'try' block always starts, it's not guaranteed to fully execute before an error is thrown.",
                        "2" : "A 'catch' block may or may not be executed, depending on if its exception type is encountered.",
                        "3" : "There is no such thing as a 'throw block'. The 'throw statement' is used to create an Exception.",
                        "4" : "Correct! 'finally' always runs."
                    }
                },
                "9" : {
                    "type" : "true false",
                    "question" : "True/False: FileReader is used to write data to a file.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Not right. FileReader is for reading, not writing.",
                        "2" : "Correct! FileReader is for reading, not writing."
                    }
                },
                "10" : {
                    "type" : "multiple choice",
                    "question" : "Which class is used to take console input in Java?",
                    "options" : {"1" : "InputStream", "2" : "Reader", "3" : "Scanner", "4" : "Stream"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {"3" : "Correct! Scanner reads console input."}
                },
                "11" : {
                    "type" : "multiple choice",
                    "question" : "Which data structure allows duplicate values and maintains order?",
                    "options" : {"1" : "Set", "2" : "Map", "3" : "ArrayList", "4" : "HashSet"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {"3" : "Correct! ArrayList supports duplicates and order."}
                },
                "12" : {
                    "type" : "true false",
                    "question" : "True/False: Arrays can be resized after creation.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Arrays are immutable, which means their size cannot be changed.",
                        "2" : "Correct! Arrays are fixed size."
                    }
                },
                "13" : {
                    "type" : "multiple choice",
                    "question" : "What is the default initial capacity of an ArrayList in Java?",
                    "options" : {"1" : "0", "2" : "8", "3" : "10", "4" : "16"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {
                        "3" : "Correct! Default capacity is 10."
                    }
                },
                "14" : {
                    "type" : "multiple choice",
                    "question" : "Which class is thread-safe for concurrent hash-based maps?",
                    "options" : {"1" : "HashMap", "2" : "Hashtable", "3" : "ConcurrentHashMap", "4" : "TreeMap"},
                    "correct_responses" : ["3"],
                    "points" : 10,
                    "feedback" : {
                        "3" : "Correct! ConcurrentHashMap is thread-safe."
                    }
                },
                "15s" : {
                    "type" : "true false",
                    "question" : "True/False: Generic classes allow you to define type-safe templates.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Correct! Generics improve type safety."
                    }
                }
            }
        }
    }
}