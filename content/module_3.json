{
    "name" : "module_3",
    "title" : "Module 3: Methods and Subprograms",
    "number" : 3,
    "activity_count" : 4,
    "content" : {
        "activity1" : {
            "name" : "Reading 3",
            "id" : "3-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Methods and Subprograms",
                "2h1" : "Defining and Calling",
                "2p" : "%bMethods%/b (which can be called %bFunctions%/b in many cases) are named blocks of code designed to perform specific tasks. These are one of the most important elements to writing clean programs: creating and using methods will help with organization, reusability, and debugging. In Java, you declare a method by specifying its %breturn type%/b, %bname%/b, and %bparameters%/b. This line is called the %bMethod header%/b. Some examples are: %cpublic int add(int a, int b) { ... }%/c%cpublic void greet() { ... }%/cpublic static void main(String[] args) { ... }%/c At this point, you've probably seen that last one several times, so let's talk about it some more. This line is creating a method called 'main'. It is a %kpublic%/k class which means it can be called anywhere. It is a %kstatic%/k method which means it belongs to its class. It doesn't return anything, so we use %kvoid%/k Like we've said, it's named 'main'. Its parameter is an array of %kString%/ks called 'args'. When we run our program from the command line (or by pressing the run button), this is the method that the compiler will search for to start your program. This is called an %bentry point%/k.%nNow let's look at how to make functions work for us! In addition to the header, functions should have a %bbody%/b, which is what goes inside those curly braces. For example:%cpublic void greet() {%n%tSystem.out.println(%'Hello, World!%');%n}%/c The code in the body tells Java what to do when you %binvoke%/b %kgreet()%/k in your program.",
                "3h1" : "Method Returns and Parameters",
                "3p" : "Methods can %breturn values%/b and accept %bparameters%/b to handle different inputs. Defining the return type is the purpose of including a type name in the method header. We can use any type here, or no type at all, in which case we write %kvoid%/k to mark that the function returns no values.%nParameters, meanwhile, are the pieces of data which we can give (or pass) to our function. Parameters are listed in the peretheses after the method name, identified by their type and the name you want them to have inside the method. All the values passed to the function are Copied or Duplicated, so changing them inside the method body %bdoes not affect%/b the variables you called the function with. Here's an example: %cpublic int add(int a, int b) {%n%treturn a + b;%n}%/c Here, %kadd%/k takes two %bint%/b parameters, which we name 'a' and 'b', adds them together, and returns the sum. The return type %bint%/b indicates the method yields an integer result. To %bcall%/b (or %binvoke%/b) this method, we use its name followed by the necessary parameters inside parenthases. Using the %ksum%/k method as an example, we could do this: %cint x = sum(10, 8);%/c Once the method returns a value, it will be assigned to x. To call a method with no parameters, use empty parentheses, like this: %cgreet();%/c This will call greet. Note that you can only %baccess%/b a method inside its %bscope%/b, which is what words like %kpublic%/k and %kprivate%/k identify. %kpublic%/k means a method can be accessed anywhere, while %kprivate%/k means that the method can only be used %binside the same class%/b. We'll talk more about why this is important in the section on classes.",
                "4h1" : "Overloading",
                "4p" : "%bOverloading%/b lets you define multiple methods with the same name but different parameter lists. Based on the arguments you call a method with (their number or types), Java chooses the correct method to invoke. Here's an example:%cpublic void display(int num) {%n%tSystem.out.println(num);%n}%npublic void display(String message) {%n%tSystem.out.println(message);%n}%/c Both methods are named %kdisplay%/k, yet Java distinguishes them by their parameter types. Calling %kdisplay%/k with an %kint%/k value will invoke the first, while calling the same method with a %kString%/k value invokes the second: %cdisplay(3); // calls display(int num)%ndisplay(%'Hi!%'); // calls display(String message)%/c",
                "5h1" : "Pass-by-Value vs Pass-by-Reference",
                "5p" : "Java uses %bpass-by-value%/b for all method arguments. This means a copy of the variable's value is passed. For primitive types, the value itself is copied. For objects, the reference is copied, so methods can modify object state but cannot reassign the original reference. Example:%cpublic void updateValue(int num) {%n%tnum = 100; // only the copy changes%n}%n%npublic void updateObject(MyClass obj) {%n%tobj.value = 100; // modifies the actual object's value field%n}%/c We'll explore the implications of this some more in the module on Classes.",
                "6h1" : "The Call Stack",
                "6p" : "While Java is running, it manages all the methods and variables you use by placing them in something called the %bStack%/b. Imagine a stack of pancakes: from the top of the pile, you can either add a new pancake or grab one to eat. When something is pushed (added) to the stack, it goes on top. When something is removed (popped), it is removed from the top. At the bottom of our stack goes the %bMain Method%/b. Every time we call a method, a new %bframe%/b is created and pushed. Once that method returns, the frame is popped and destroyed. Here's something new: what happens if we call one method, say %kint B()%/k inside another method, called %kint A()%/k, which itself is called from %kmain%/k? In this case, %kmain%/k stays at the bottom of our stack, %kA()%/k is placed on top, and then %kB()%/k is put on top of %kA()%/k. When each method returns (or ends), control will pass back to the topmost method on the stack. When %kmain%/k returns (or ends), the program is done.",
                "7h1" : "Recursion",
                "7p" : "%bRecursion%/b occurs when a method calls itself to solve a smaller instance of the same problem. Have you ever seen those nesting dolls that can be put inside each other? That could be called an example of recursion. In Java, recursion is as easy as invoking a method inside itself. A clear %bbase case%/b is essential: this is a condition on which recursion should stop and no further calls should be made. Here's an example which finds the factorial of a number:%cpublic int factorial(int n) {%n%tif (n <= 1) {%n%t%treturn 1; // base case%n%t}%n}%/c Without the base case, the calls would continue indefinitely, and we'd eventually run out of memory space without returning anything useful (don't worry if this happens- the memory manager will reclaim everything once execution stops). After the base case, we define a %brecursive case%/b. This is the condition when another call should be made. Let's add this to our %kfactorial%/k method: %cpublic int factorial(int n) {%n%tif (n <= 1) {%n%t%treturn 1; // base case%n%t}%n%telse {%n%t%treturn n * factorial(n - 1);%n%t}%n}%/c As long as %kn%/k is larger than 1, factorial will call itself recursively. Once %kn%/k reaches 1, the function will start returning, all the way down the chain until the very first function returns with our factorial value. There are many problems that can be solved this way, by defining a base case and a recursive case.",
                "9h1" : "Best Practices",
                "9p" : "- Keep methods focused: each should do one task.%n- Choose descriptive names: %kgreetUser()%/k is clearer than %kmethod1()%/k.%n- Limit parameters: if you need many, consider grouping them into an object.%n- Document non-obvious behavior with comments.%n- Write small helper methods to simplify complex logic."
            }
        },
        "activity2": {
            "name": "Coding 3",
            "id": "3-3",
            "type": "coding_activity",
            "content": {
                "context": {
                    "1h1": "Writing and Calling Methods",
                    "1p": "You've learned how to define methods with parameters and return values, how to call those methods, and even how to overload and use recursion. In this challenge, you're going to write three different methods: one that adds two integers, one that multiplies two doubles, and one recursive method that returns the factorial of a number. Then, use each method and return a formatted string showing their results."
                },
                "base_code": "public class Lab {%n%tpublic static int add(int a, int b) {%n%t%t// Add and return the sum%n%t%treturn 0;%n%t}%n%n%tpublic static double multiply(double a, double b) {%n%t%t// Multiply and return the product%n%t%treturn 0.0;%n%t}%n%n%tpublic static int factorial(int n) {%n%t%t// Return the factorial using recursion%n%t%t// base case:%n%t%t%n%t%treturn 1;%n%n%t%t// recursive case:%n%t%t%n%t%treturn 1;%n%t}%n}",
                "output_type": "input output",
                "number_test_cases": 3,
                "test_cases": {
                    "case_1": {"input": "", "output": "12, 10.0, 24"},
                    "case_2": {"input": "", "output": "12, 10.0, 24"},
                    "case_3": {"input": "", "output": "12, 10.0, 24"}
                }
            }
        },
        "activity3" : {
            "name" : "Quiz 3",
            "id" : "3-4",
            "type" : "quiz_activity",
            "content" : {
                "question1" : {
                    "type" : "multiple choice",
                    "question" : "Which term best describes a method that calls itself?",
                    "options" : {
                        "1" : "Iteration",
                        "2" : "Recursion",
                        "3" : "Overloading",
                        "4" : "Encapsulation"
                    },
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Iteration uses loops rather than self-calls.",
                        "2" : "Correct! Recursion is when a method calls itself.",
                        "3" : "Overloading involves multiple methods sharing a name.",
                        "4" : "Encapsulation bundles data and methods together."
                    }
                },
                "question2" : {
                    "type" : "true false",
                    "question" : "True/False: In Java, overloaded methods must have different parameter lists.",
                    "options" : {
                        "1" : "True",
                        "2" : "False"
                    },
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Correct! Overloaded methods differ by parameters.",
                        "2" : "Incorrect. They must differ in parameter lists."
                    }
                }
            }
        }
    }
}