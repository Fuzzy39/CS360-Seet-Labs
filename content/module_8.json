{
    "name" : "module_8",
    "title" : "Module 8",
    "activity_count" : 4,
    "content" : {
        "activity1" : {
            "name" : "Reading 1",
            "id" : "8-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Arrays",
                "1h1" : "What is an Array?",
                "1p" : "Arrays are a simple way to store several pieces of data. They allow fast random access through indexing. Any primitive type or object can be held in an array. Arrays have a length and are %iimmutable%/i, which means that their size cannot be changed.",
                "2h1" : "Declaring an Array",
                "2p" : "Arrays can be created by first declaring the type of value in the array, followed by square brackets [], then the name of the array:%cint[] myArray%/cAternately, place the square brackets after the array name:%cint myArray[]%/cIn these cases, the array is named myArray and can store integers.",
                "3h1" : "Instantiating an Array",
                "3p" : "There are several ways to instantiate an array. One way is done in the same line as the array is declared and requires all the values to be known beforehand. To do this, use curly braces and separate the entries with commas:%cint[] myArray = {1, 3, 5, 7, 9};%/cThis creates an array with the same size as the number of entries listed.%nAnother way allows the size of the array to be set without populating the array. To do this, use the %knew%/k keyword and again use the type of value followed by square brackets. This time, put the length of the array (the number of entries it should store) inside the brackets. It should look like this: %cint[] myArray = new int[10];%/cIn this case, myArray can store 10 integer values.",
                "4h1" : "Accessing values in an Array",
                "4p" : "To access a value within an array, use its %kIndex%/k. Arrays are zero-indexed, which means that the first element in the array has an index of 0. The second value therefore has an index of 1, and so on. To access a value from an array by index, use square brackets with the index inside:%cmyArray[0];%/cIn this example, the first entry will be retrieved.",
                "5h1" : "Looping through an Array",
                "5p" : "Traversing arrays is an obvious use of loops. For example, this is how to use a %kfor%/k loop to print all the values in an array:%cfor (int i = 0; i < myArray.length; i++) {%n%tSystem.out.println(myArray[i]);%n}%/cNotice the use of the %k.length%/k property, which returns the number of elements which can be held in the array. This is also a way to get the last element in an array:%cmyArray[myArray.length - 1];%/cAlso note that the index of the last item is %klength - 1%/k, again because of zero-indexing. If you try to access an index which is outside the array, an %kIndexOutOfBoundsException%/k will be thrown."
            }
        },
        "activity2" : {
            "name" : "Reading 2",
            "id" : "8-2",
            "type" : "reading_activity",
            "content" : {
                "t" : "Multi-Dimensional Arrays",
                "1h1" : "Arrays of Arrays",
                "1p" : "Arrays can hold other arrays"
            }
        },
        "activity3" : {
            "name" : "Coding 1",
            "id" : "8-3",
            "type" : "coding_activity",
            "content" : {
                "" : ""
            }
        },
        "activity4" : {
            "name" : "Quiz 1",
            "id" : "8-4",
            "type" : "quiz_activity",
            "content" : {
                "question1" : {
                    "type" : "Multiple choice",
                    "question" : "Select a proper way to create an integer array in Java.",
                    "options" : ["int[] array", "int array[]", "array int[]", "array[int]"],
                    "correct_responses" : ["int[] array", "int array[]"],
                    "points" : 10,
                    "feedback" : "To make an array, declare the type and name, using square brackets."
                },
                "question2" : {
                    "type" : "True False",
                    "question" : "True/False: This is the correct way to access the first element in an array?\n%carray[1]%/c",
                    "options" : ["True", "False"],
                    "correct_responses" : ["False"],
                    "points" : 10,
                    "feedback" : "Arrays are zero-indexed, so the first element is accessed at index 0."
                }
            }
        }
    },
    "" : {
        "name" : "module_8",
        "title" : "Module 8: Arrays and Collections",
        "activity_count" : 4,
        "content" : {
            "activity1" : {
                "name" : "Reading 8",
                "id" : "8-1",
                "type" : "reading_activity",
                "content" : {
                    "1t" : "Arrays and Collections",
                    "2h1" : "Declaring and Using Arrays",
                    "2p" : "Arrays in Java are used to store multiple values of the same type:%c int[] numbers = {1, 2, 3, 4, 5};%/c Elements are accessed by their index, starting at 0.",
                    "3h1" : "Multidimensional Arrays",
                    "3p" : "Java supports multidimensional arrays, such as 2D arrays:%c int[][] matrix = {{1, 2}, {3, 4}};%/c These are often used for grid-based structures.",
                    "4h1" : "Lists",
                    "4p" : "The %bArrayList%/b class provides dynamic resizing and flexibility over arrays:%c ArrayList<String> list = new ArrayList<>();%nlist.add(%'Hello%');%/c",
                    "5h1" : "Sets",
                    "5p" : "Sets store unique elements and do not allow duplicates. The %bHashSet%/b class is commonly used:%c Set<Integer> set = new HashSet<>();%nset.add(10);%/c",
                    "6h1" : "Maps",
                    "6p" : "Maps store key-value pairs. The %bHashMap%/b class is frequently used:%c Map<String, Integer> map = new HashMap<>();%nmap.put(%'Alice%', 25);%/c",
                    "7h1" : "Iterators",
                    "7p" : "Iterators provide a way to traverse collections. The %bIterator%/b interface allows element retrieval:%c Iterator<Integer> it = list.iterator();%nwhile (it.hasNext()) {%n%tSystem.out.println(it.next());%n}%/c"
                }
            },
            "activity2" : {
                "name" : "Coding 8",
                "id" : "8-3",
                "type" : "coding_activity",
                "content" : {
                    "" : ""
                }
            },
            "activity3" : {
                "name" : "Quiz 8",
                "id" : "8-4",
                "type" : "quiz_activity",
                "content" : {
                    "question1" : {
                        "type" : "multiple choice",
                        "question" : "Which collection type does not allow duplicate elements?",
                        "options" : {"1" : "List", "2" : "Set", "3" : "Map", "4" : "Array"},
                        "correct_responses" : ["2"],
                        "points" : 10,
                        "feedback" : {
                            "1" : "Incorrect. Lists allow duplicates.",
                            "2" : "Correct! Sets do not allow duplicate elements.",
                            "3" : "Not quite. Maps store key-value pairs but allow duplicate values.",
                            "4" : "Incorrect. Arrays can contain duplicates." 
                        }
                    },
                    "question2" : {
                        "type" : "true false",
                        "question" : "True/False: An ArrayList has a fixed size that cannot change during runtime.",
                        "options" : {"1" : "True", "2" : "False"},
                        "correct_responses" : ["2"],
                        "points" : 10,
                        "feedback" : {
                            "1" : "Incorrect. Unlike arrays, ArrayLists dynamically resize.",
                            "2" : "That's right! ArrayLists grow and shrink dynamically." 
                        }
                    }
                }
            }
        }
    }
}