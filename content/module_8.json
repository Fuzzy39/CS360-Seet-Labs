{
    "name" : "module_8",
    "title" : "Module 8: Arrays and Collections",
    "number" : 8,
    "activity_count" : 4,
    "content" : {
        "activity_1" : {
            "name" : "Reading 8: Arrays and Collections",
            "id" : "8-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Arrays and Collections",
                "2h1" : "What is an Array?",
                "2p" : "An %barray%/b is a fixed-size container that holds elements of the same type, offering %bfast random access%/b via zero-based indexing. Once created, its length cannot change, making it %bimmutable%/b in size. Arrays are stored in contiguous memory, which enables quick lookups by calculating the memory offset. Use arrays when you know the exact number of elements in advance and require efficient access. For dynamic sizes, consider collections.",
                "3h1" : "Declaring and Instantiating",
                "3p" : "To declare an array, specify the type and brackets. You can instantiate later or inline with values. Examples:%c// Declare then instantiate%nint[] nums; %nnums = new int[5]; // default values: 0%n%n// Declare and initialize%nString[] names = { %'Alice%', %'Bob%', %'Charlie%' };%/c%nInstantiation with %knew%/k reserves memory and sets default values (0 for numbers, false for booleans, null for objects). Inline initialization skips default and sets specified values directly.",
                "4h1" : "Accessing and Modifying",
                "4p" : "Use the %bindex%/b in square brackets to get or set elements. Indexing starts at 0 and goes to %blength - 1%/b. Examples:%cnums[0] = 10; // set first element%nint first = nums[0]; // get first element%nnums[nums.length - 1] = 99; // set last element%/c%nAccessing an invalid index (negative or >= length) throws %kIndexOutOfBoundsException%/k at runtime. Always validate indexes if they come from user input.",
                "5h1" : "Looping Through Arrays",
                "5p" : "Classic %kfor%/k loops give you control over index:%cfor (int i = 0; i < nums.length; i++) {%n%tSystem.out.println(%'Element at %' + i + %': %' + nums[i]);%n}%/c%nEnhanced %kfor-each%/k loops simplify iteration when index is not needed:%cfor (int num : nums) {%n%tSystem.out.println(num);%n}%/c%nCombine loops with conditionals for filtering or transformations, e.g., collecting even numbers.",
                "6h1" : "Multidimensional Arrays",
                "6p" : "Multidimensional arrays are arrays of arrays, forming grids or matrices. Declare with multiple brackets:%cint[][] matrix = new int[3][4];%nmatrix[1][2] = 5; // second row, third column%n%n// Jagged array example%nint[][] jagged = { {1}, {2,3}, {4,5,6} };%/c%nIterate with nested loops:%cfor (int i = 0; i < matrix.length; i++) {%n%tfor (int j = 0; j < matrix[i].length; j++) {%n%t%tSystem.out.print(matrix[i][j] + %' %');%n%t}%n%tSystem.out.println();%n}%/c%nUse multidimensional arrays for game boards, tables, and image data.",
                "7h1" : "Collections Framework Overview",
                "7p" : "Java's %bCollections Framework%/b provides dynamic, resizable data structures. Key interfaces include %bList%/b (ordered), %bSet%/b (unique elements), and %bMap%/b (key-value pairs). Implementations like %bArrayList%/b, %bLinkedList%/b, %bHashSet%/b, and %bHashMap%/b handle common use cases with built-in methods for adding, removing, and querying elements. Collections handle resizing internally, making them ideal when element counts vary at runtime.",
                "8h1" : "Lists in Depth",
                "8p" : "%bList%/b interface supports ordered collections that may contain duplicates. %bArrayList%/b uses a dynamic array; it offers O(1) random access but O(n) insertions in the middle. %bLinkedList%/b uses a doubly-linked list; it has O(1) insertions/deletions at ends but O(n) access by index. Choose based on performance needs. Example operations:%clist.add(%'A%');%nlist.get(2);%nlist.remove(0);%nlist.size();%/c%nUse %bListIterator%/b for bidirectional traversal and element modifications during iteration.",
                "9h1" : "Sets and Their Uses",
                "9p" : "%bSet%/b ensures no duplicates. %bHashSet%/b provides O(1) add/contains via hashing. %bLinkedHashSet%/b preserves insertion order with a linked list. %bTreeSet%/b sorts elements using a red-black tree with O(log n) operations. Sets are ideal for membership tests, removing duplicates, and maintaining unique collections.",
                "10h1" : "Maps: Key-Value Storage",
                "10p" : "%bMap%/b stores associations between keys and values. %bHashMap%/b offers O(1) average operations. %bLinkedHashMap%/b preserves insertion order, and %bTreeMap%/b sorts keys. Example:%cMap<String, Integer> ages = new HashMap<>();%nages.put(%'Alice%', 30);%nages.get(%'Bob%');%nages.containsKey(%'Alice%');%nages.remove(%'Charlie%');%/c%nMaps support bulk operations via %bputAll%/b and iteration over entry sets.",
                "11h1" : "Iterators and Enhanced Traversal",
                "11p" : "%bIterator%/b allows safe removal during iteration. Example:%cIterator<String> it = list.iterator();%nwhile (it.hasNext()) {%n%tString s = it.next();%n%tif (s.isEmpty()) it.remove();%n}%/c%nUse %bforEach%/b and lambda expressions (Module 10) for concise traversal: %clist.forEach(item -> System.out.println(item));%/c",
                "12h1" : "Utility Classes: Arrays and Collections",
                "12p" : "The %bArrays%/b class offers static methods for arrays: %csort%/c, %cbinarySearch%/c, %ccopyOf%/c, and %ctomList%/c. The %bCollections%/b class provides algorithms for collections: %creverse%/c, %cshuffle%/c, %cmax%/c, and %cmin%/c. Example:%cArrays.sort(nums);%nint pos = Arrays.binarySearch(nums, 5);%nCollections.reverse(list);%/c Use these utilities to avoid reinventing common algorithms.",
                "13h1" : "Thread-Safe Collections",
                "13p" : "In multi-threaded contexts, use concurrent collections like %bConcurrentHashMap%/b, %bCopyOnWriteArrayList%/b, and %bBlockingQueue%/b. These classes handle synchronization internally, preventing data races and ensuring safe access from multiple threads.",
                "14h1" : "Best Practices",
                "14p" : "- Prefer collections over arrays when size varies.%n- Use generics to enforce type safety (e.g., List<String>).%n- Choose the right implementation for performance (ArrayList vs LinkedList).%n- Avoid modifying a collection while iterating; use iterators or streams.%n- Always specify initial capacity when possible to reduce resizing overhead.%n- Leverage utility methods in Arrays and Collections for common tasks."
            }
        },
        "activity_2": {
            "name": "Coding 8: Arrays and Collections Practice",
            "id": "8-2",
            "type": "coding_activity",
            "content": {
                "context": {
                    "1h1": "Arrays and Collections Practice",
                    "1p": "In this challenge, you will write a Java program that reads a list of integers from the user, stores them in an %kArrayList%/k, sorts them, and prints the result. Then, convert the list to a %kSet%/k to remove duplicates, and finally display the contents of the set."
                },
                "base_code": "import java.util.*;%n%npublic class Lab {%n%tpublic static void main(String[] args) {%n%t%tScanner scanner = new Scanner(System.in);%n%t%t%n%t%t// Read space-separated integers from user%n%t%tString input = scanner.nextLine();%n%t%t%n%t%t// Store integers in a list%n%t%t%n%t%t// Sort the list%n%t%t%n%t%t// Convert list to set to remove duplicates%n%t%t%n%t%t// Print sorted list and unique set%n%t%t%n%t%tscanner.close();%n%t}%n}",
                "launcher": "ConsoleLauncher",
                "number_test_cases": 1,
                "test_cases": {
                    "case_1": {
                        "input": "5 3 8 3 1 5 2",
                        "output": "Sorted list: [1, 2, 3, 3, 5, 5, 8]%nUnique set: [1, 2, 3, 5, 8]"
                    }
                }
            }
        },
        "activity_3" : {
            "name" : "Quiz 8: Arrays",
            "id" : "8-3",
            "type" : "quiz_activity",
            "content" : {
                "1" : {
                    "type" : "multiple choice",
                    "question" : "Which declaration creates a 2D array?",
                    "options" : {"1" : "int[][] a;", "2" : "int a[][][];", "3" : "int[2][3] a;", "4" : "int a[2][];"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Correct! int[][] a declares a 2D array.",
                        "2" : "That's 3D.",
                        "3" : "Invalid Syntax: you cannot specify sizes in declaration.",
                        "4" : "Invalid Syntax: you cannot specify sizes in declaration."
                    }
                },
                "2" : {
                    "type" : "true false",
                    "question" : "True/False: ArrayList allows duplicate elements.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Correct! Lists allow duplicates.",
                        "2" : "Incorrect. ArrayList can contain duplicates."
                    }
                },
                "3" : {
                    "type" : "multiple choice",
                    "question" : "Which class provides utility methods for arrays?",
                    "options" : {"1" : "Collections", "2" : "Arrays", "3" : "ArrayList", "4" : "Math"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Collections is for collections, not arrays.",
                        "2" : "Correct! Arrays has methods like sort and binarySearch.",
                        "3" : "ArrayList is a collection implementation.",
                        "4" : "Math is for math operations."
                    }
                },
                "4" : {
                    "type" : "multiple choice",
                    "question" : "What happens when you access index -1 in an array?",
                    "options" : {
                        "1" : "Returns first element",
                        "2" : "Throws IndexOutOfBoundsException",
                        "3" : "Returns last element",
                        "4" : "Compiler error"
                    },
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "No, index starts at 0.",
                        "2" : "Correct! Negative index is out of bounds.",
                        "3" : "No automatic wrap-around.",
                        "4" : "It's a runtime exception, not compile-time."
                    }
                },
                "5" : {
                    "type" : "true false",
                    "question" : "True/False: HashSet maintains insertion order.",
                    "options" :  {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. HashSet is unordered.",
                        "2" : "Correct! Use LinkedHashSet for insertion order."
                    }
                }
            }
        }
    }
}