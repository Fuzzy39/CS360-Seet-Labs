{
    "name" : "module_1",
    "title" : "Module 1: Variables and Data Types",
    "number" : 1,
    "activity_count" : 4,
    "content" : {
        "activity_1" : {
            "name" : "Reading 2 : Variables",
            "id" : "1-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Variables and Data Types",
                "2h1" : "Variables",
                "2p" : "If you've paid attention in your math classes, you've heard of variables. Variables are essentially names for some number, whether you know its value or not. In Java, variables are a little more complicated, but the basic idea is the same. Variables store some bit of data so we can use it throughout our program. The most important things to know about a variable are its %bName%/b, %bType%/b, and %bValue%/b. Here's how we create a variable in Java: %cint myVar = 10;%/cThere are a few things to notice here. The first keyword we use is %kint%/k, which tells Java what %ikind%/i of variable we are making, in this case an %kinteger%/k. Next, we give the variable a name, %kmyVar%/k in this case, which can be anything we want so long as it starts with a letter ('A'-'Z' or 'a'-'z') or underscore ('_'). Finally, we give the variable a value. You'll notice that we use a regular, old equals sign %k=%/k for that, which is called the %bAssignment Operator%/b (how fancy). We could have skipped this part for now, but we have to make sure to give our variable a value at some point before we actually use the it for anything. We could have done the same thing this way: %cint myVar;%n// Some other code%nmyVar = 10;%/cThe first line here is called %bDeclaration%/b, when we tell the compiler to create a place to store a value, while the last line is called %bInstantiation%/b, when we tell our program to give the variable a value. Next, we'll talk some more about %bData Types%/b.",
                "3h1" : "Primitive Types",
                "3p" : "Every variable in a Java program has a %bType%/b. This tells the Compiler how to treat a variable, how big it is, and what kind of %istuff%/i we can store in it. Some of these types are called %bPrimitive Types%/b, which doesn't mean they're any less useful than other types but does mean that they hold a pure, simple value of some kind. In Java, there are 8 primitive types:%n%kboolean%/k — Hold true or false and nothing in between. %kboolean likesPizza = true;%/k%n%kbyte%/k — Holds 8 ones or zeroes (bits) for a range of [-128, 127]. %kbyte pizzasEaten = 100;%/k%n%kchar%/k — Holds a single character, like the keys on your keyboard (as well as a bunch of other interesting symbols). To mark a char, use single quotes (' ') around one letter or symbol. %kchar lastNameInitial = 'L';%/k%n%kshort%/k — A 16-bit whole number with a range of [-32768, 32767]. %kshort totalPizzas = 32000;%/k%n%kint%/k — A very commonly-used datatype holding a whole number with a range in the billions. %kint MAX_PIZZAS = 1000000;%/k%n%klong%/k — Holds a whole number value with double the size of an int and a range in the quintillions. %klong population2020 = 7_855_000_000L;%/k%n%kfloat%/k — Holds a decimal value with 7 digits of precision. %kfloat pepperoniPercentage = 0.40f;%/k%n%kdouble%/k — Another very common type which holds decimals with 15 digits of precision. %kdouble pizzaWeight = 2.5934;%/k%nAll of these data types have their own use and applications, but %kboolean%/k, %kint%/k, and %kdouble%/k are the most commonly used primitive types.",
                "4h1" : "Reference Types",
                "4p" : "As opposed to %bPrimitive Types%/b, %bReference Types%/k are not values themselves but rather point to a place in memory and tells the program where to find some other values, like how the number on your house tells people where to find it. Reference Types %irefer%/i to %bObjects%/b of which there are many, many varieties. Some of the most common are:%n%kString%/k — Holds a string of characters, like a sentence or a name. To create a string, use double quotation marks (%' %'). %kString pizzaType = %'Cheese%';%/k%n%kDate%/k — This is used to store a specific point in time, given as a number of milliseconds since the beginning of the year 1970. %kDate birthday = new Date();%/k%n%kList, Set, and Map%/k — These are Collections, which will be explored in a later chapter.%n%kInteger, Double, Boolean%/k — These are different from the primitive types we already talked about: notice the capital letters which mark these as %bWrapper Classes%/b. We'll explain these more later.%nAll of these types start with a capital letter and are made up of the primitive types we already discussed. They can also have certain %bMethods%/b which define their behavior and interactions. For instance: %cString name = %'Jimmy%';%nSystem.out.print(name.charAt(0)); // Prints 'J'%/cIn this example, we create a String and then ask for the first character inside that string. Here's an example of another type of Reference Type:%cDate myDate = new Date(0);%nSystem.out.print(myDate.getTime()); // Prints %'0%'%/cIn this case, we create a Date Object using the %knew%/k keyword, and give it a value of 0. Then, we print that same value using the %k.getTime()%/k method. All Objects have a set of defined variables (also called fields, attributes, or members), as well as a set of operations (also called methods, functions, or behaviors). One very important reference value is %knull%/k, which is a reserved keyword representing the absence of a value or reference. We can set any reference value to null, but attempting to use that reference will result in an error:%cDate date = null;%nSystem.out.print(date.toString()); // ERROR!%/c",
                "5h1" : "Type Conversion and Casting",
                "5p" : "Sometimes, you might need to change the type of a variable, or to use its value as a different type. When using Objects which provide an easy way to do this, the process is simple. For instance, we might want to turn a String into an int:%int myInt = Integer.parseInt(%'100%');%/c This will instantiate myInt with a value of 100. However, how can we turn a int into a double, and vice versa? This is called %bCasting%/b, and can be performed in several ways. One type of type conversion is %bimplicit casting%/b, in which the compiler will automatically %bwiden%/b certain values into values with a greater range, size, or precision: %cint intValue = 10;%ndouble doubleValue = intValue; // doubleValue is 10.0%/cIn this case, the int is %iwidened%/i into a double. This works for float -> double, int -> long, short -> float, etc. Another type of type conversion is called %bexplicit casting%/b and must be used when performing %bnarrowing%/b, or turning a value into a value with a lesser size, range, or precision:%cdouble doubleValue = 10.99;%nint intValue = (int) doubleValue; // intValue is 10%/cThe decimal value of the double will be %bchopped%/b or %btruncated%/b and lost, not rounded.",
                "6h1" : "Constants",
                "6p" : "There are many reasons you might want to create a %bConstant Variable%/b, the value of which will never change. For instance, many important mathematical values are constants, like π, e, or φ. In Java, we can make a constant using the %kfinal%/k keyword:%cfinal double PI = 3.141592653589793;%/cOnce set, the value of a %kfinal%/k variable cannot be changed, which means that you %imust%/i initialize the variable on the same line as it is declared. Constants are accessed just like any other variable inside your programs. It is convention to name %kfinal%/k variables with capital letters, with words separated by underscores.",
                "7h1" : "Other Attributes of a Variable",
                "7p" : "While we've already discussed the most important attributes of a variable, there are many more ways to describe a variable than just its type, name, and value. These include: %bScope%/b, or the area of code in which a variable can be accessed; %bMutability%/b, or whether a variable's value can be changed (remember constants); %bVisibility%/b, which describes what classes may access a variable (like public, private, and protected); %bLocation%/b, which we discussed with Reference Variables; and %bLifespan%/b, which is closely linked to scope and describes the period during which a variable exists (like local and static). All of these describe when, how, and where a variable may be set, modified, and accessed."
            }
        },
        "activity_2" : {
            "name" : "Coding 2 : Creating Variables",
            "id" : "1-2",
            "type" : "coding_activity",
            "content": {
                "context": {
                    "1h1": "Working with Variables and Types",
                    "1p": "You've learned how to declare variables, assign values, and work with different primitive and reference types in Java. Now let's put it all together! In this activity, you'll define and use several variables of various types. Use at least one variable of each of the following types and values: %kint%/k with a value of 100, %kdouble%/k with a value of 20.0, %kchar%/k with a value of 'J', %kboolean%/k with a value of true, and %kString%/k with a value of %'Hello%'. Make sure your values match the ones here exactly. Finally, print out each of those values in the same order you created them using %kSystem.out.println()%/k."
                },
                "base_code": "public class Lab {%n%tpublic static void Variables() {%n%t%t// Declare and initialize variables below%n%t%t%n%t%t// Print all values using System.out.println%n%t}%n}",
                "output_type": "console out",
                "number_test_cases": 1,
                "test_cases": {
                    "case_1": {"input": "", "output": "100 20.0 J%true Hello"}
                }
            }
        },
        "activity_3" : {
            "name" : "Quiz 2 : Variables",
            "id" : "1-3",
            "type" : "quiz_activity",
            "content" : {
                "question1" : {
                    "type" : "multiple choice",
                    "question" : "Select a real Java primitive type.",
                    "options" : {"1" : "String", "2" : "float", "3" : "Integer", "4" : "string"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "String is a very useful and common data type, but it is not a primitive in Java. Notice that String starts with a capital letter: that indicates it is an Object.",
                        "2" : "Correct! Floats are a primitive data type used to store numbers with decimal parts.",
                        "3" : "While %kint%/k is a primitive type, Integer is the associated wrapper type for int. Notice that Integer is capitalized, which indicates that it is an Object.",
                        "4" : "String (with a capital S) is an Object in Java, but string (with lowercase s) is not."
                    }
                },
                "question2" : {
                    "type" : "true false",
                    "question" : "True/False: To create an object instance, use the %kcreate%/k keyword.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. To create an object instance, we use the %knew%/k keyword.",
                        "2" : "That's right. To create an object instance, we use the %knew%/k keyword."
                    }
                },
                "question3" : {
                    "type" : "true false",
                    "question" : "True/False: Variables declared as %kfinal%/k are immutable and their value cannot be changed.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "That's correct. Using the %kfinal%/k keyword makes a variable immutable and means its value cannot be reassigned.",
                        "2" : "Nope, %kfinal%/k variables are immutable with unchanging values."
                    }
                },
                "question4" : {
                    "type" : "multiple choice",
                    "question" : "Which of these statements represents or involves a Widening conversion?",
                    "options" : {"1" : "float total = 100.0f;", "2" : "int y = (int) 45.5;", "3" : "Integer myInt = 1_000_000;", "4" : "double x = 10;"},
                    "correct_responses" : ["4"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. There is neither a widening nor a narrowing in this statement.",
                        "2" : "Not quite. This is a narrowing conversion, since we're taking a double (with a larger size) and making it an int (with a smaller size).",
                        "3" : "Though this looks like widening at first, this is actually a distinct concept called Autoboxing. Integer is a wrapper class which %icontains%/i the int value.",
                        "4" : "Correct! In this case, the (smaller) int value of 10 is being widened into the (larger) double value of 10.0."
                    }
                },
                "question5" : {
                    "type" : "true false",
                    "question" : "True/False: The name of the double type refers to the fact that it is double the size of a float.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "That's correct. A float is 32 bits (4 bytes) in size while a double is 64 bits (8 bytes).",
                        "2" : "This statement is true. A float is 32 bits (4 bytes) in size while a double is 64 bits (8 bytes)."
                    }
                }
            }
        }
    }
}