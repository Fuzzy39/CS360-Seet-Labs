{
    "name" : "module_9",
    "title" : "Module 9: Data Structures and Generics",
    "number" : 9,
    "activity_count" : 4,
    "content" : {
        "activity_1" : {
            "name" : "Reading 9: Data Structures and Generics",
            "id" : "9-1",
            "type" : "reading_activity",
            "content" : {
                "1t" : "Data Structures and Generics",
                "2h1" : "Stack, Queue, Deque",
                "2p" : "A %bStack%/b follows Last-In-First-Out (LIFO) order, meaning the most recently added element is the first to be removed. You push elements onto the top and pop them off. Internally, a Stack can be backed by a linked list or dynamic array. Use it for undo mechanisms or expression evaluation. In contrast, a %bQueue%/b uses First-In-First-Out (FIFO), adding at the tail and removing from the head—ideal for task scheduling and breadth-first search. The %bDeque%/b (Double-Ended Queue) combines both behaviors, allowing insertion and removal at both ends, supporting stack and queue operations in one structure. It’s useful for sliding-window algorithms and palindrome checking.%cStack<Integer> stack = new Stack<>();%nstack.push(10);%nint top = stack.pop();%/c",
                "3h1" : "LinkedList vs ArrayList",
                "3p" : "%bLinkedList%/b implements a doubly-linked list: each element holds references to its neighbors. Insertion and deletion at any position are O(1) operations when you have a reference to the node. However, random access by index is O(n), as it requires traversal. Use LinkedList for queues or when you frequently add/remove in the middle. %bArrayList%/b, backed by a dynamic array, offers O(1) random access but O(n) for insertions/deletions (due to shifting elements). It automatically resizes by copying to a larger array when capacity is exceeded. Choose ArrayList for fast access and when additions/removals occur mainly at the end.%cList<Integer> list = new LinkedList<>();%nList<Integer> arr = new ArrayList<>();%/c",
                "4h1" : "Binary Trees",
                "4p" : "%bBinary trees%/b are hierarchical structures where each node has up to two children (left and right). They enable efficient search, insertion, and deletion operations when balanced. A %bbinary search tree%/b (BST) maintains the invariant: left subtree values < node < right subtree values, allowing O(log n) operations on average. Unbalanced trees degrade to O(n). Binary heaps, implemented as arrays, use a complete binary tree to provide priority queue functionality. Use trees for sorted data, expression parsing, and implementing sets/maps.%cclass Node { int value; Node left, right; }%/c",
                "5h1" : "HashMap and HashSet in Detail",
                "5p" : "%bHashMap%/b stores key-value pairs using a hash table. It computes hash codes to determine bucket placement. On collisions, buckets use linked lists or balanced trees (Java 8+). Average operations are O(1), but worst-case can be O(n) if many collisions occur. Choose initial capacity and load factor to optimize performance. %bHashSet%/b uses a HashMap internally, storing elements as keys with dummy values, ensuring uniqueness. Use HashMap for associative arrays and HashSet for membership testing and deduplication.%cMap<String, Integer> map = new HashMap<>();%nSet<String> set = new HashSet<>();%/c",
                "6h1" : "Generics and Wildcards",
                "6p" : "%bGenerics%/b enable type-safe collections and classes by parameterizing types. They eliminate casts and provide compile-time type checking. Wildcards like %b? extends T%/b allow reading from collections of T or its subclasses, while %b? super T%/b allow writing to collections of T or its superclasses. Use bounded wildcards to increase API flexibility. For example, %cList<? extends Number>%/c can accept List<Integer> or List<Double>, but you cannot add elements (except null).",
                "7h1" : "Creating Generic Classes and Methods",
                "7p" : "Define generic classes and methods with type parameters. For example, a generic container:%cclass Box<T> {%n%tprivate T value;%n%tpublic void set(T value) { this.value = value; }%n%tpublic T get() { return value; }%n}%/c%nYou can also define generic methods:%cpublic static <U> void printArray(U[] arr) {%n%tfor (U elem : arr) System.out.println(elem);%n}%/c Generics support multiple type parameters and bounds: %cclass Pair<K, V> { ... }%/c."
            }
        },
        "activity_2": {
            "name": "Coding 9: Collections and Generics",
            "id": "9-2",
            "type": "coding_activity",
            "content": {
                "context": {
                    "1h1": "Stack, Queue, HashMap, and Generics",
                    "1p": "Practice working with core Java data structures and generics. This challenge will involve using a stack, a queue, a map, and writing a generic method. Complete the tasks below using appropriate data structures."
                },
                "base_code": "import java.util.*;%n%npublic class Lab {%n%n%t// Task 1: Reverse an array using a stack%n%tpublic static int[] reverseArray(int[] input) {%n%t%t// Your code here%n%t%treturn input;%n%t}%n%n%t// Task 2: Sum the first and last elements in a queue%n%tpublic static int sumQueueEnds(Queue<Integer> queue) {%n%t%t// Your code here%n%t%treturn 0;%n%t}%n%n%t// Task 3: Count occurrences using HashMap%n%tpublic static Map<String, Integer> countWords(String[] words) {%n%t%t// Your code here%n%t%treturn new HashMap<>();%n%t}%n%n%t// Task 4: Generic method to print an array%n%tpublic static <T> void printArray(T[] arr) {%n%t%t// Your code here%n%t}%n%n%tpublic static void main(String[] args) {%n%t%t// You can test your methods here%n%t}%n}",
                "launcher": "ConsoleLauncher",
                "number_test_cases": 1,
                "test_cases": {
                    "case_1": {
                        "input": "",
                        "output": ""
                    }
                }
            }
        },
        "activity_3" : {
            "name" : "Quiz 9: Data Structures",
            "id" : "9-3",
            "type" : "quiz_activity",
            "content" : {
                "1" : {
                    "type" : "multiple choice",
                    "question" : "Which data structure follows Last-In-First-Out (LIFO) order?",
                    "options" : {"1" : "Queue", "2" : "Stack", "3" : "HashSet", "4" : "Binary Tree"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. Queues follow FIFO.",
                        "2" : "Correct! Stacks are LIFO.",
                        "3" : "HashSet has no order.",
                        "4" : "Binary Tree is hierarchical."
                    }
                },
                "2" : {
                    "type" : "true false",
                    "question" : "True/False: Generics in Java allow for defining methods that work with multiple data types.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["1"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Correct! Generics enable type parameters.",
                        "2" : "Incorrect. Generics enhance flexibility."
                    }
                },
                "3" : {
                    "type" : "multiple choice",
                    "question" : "Which implementation offers O(1) random access but O(n) insertion in the middle?",
                    "options" : {"1" : "LinkedList", "2" : "ArrayList", "3" : "HashSet", "4" : "TreeMap"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "LinkedList has O(n) access.",
                        "2" : "Correct! ArrayList has fast access but slow middle inserts.",
                        "3" : "HashSet is unordered.", "4" : "TreeMap is a sorted map."
                    }
                },
                "4" : {
                    "type" : "multiple choice",
                    "question" : "In a HashMap, what happens when two keys have the same hash code?",
                    "options" : {"1" : "One overwrites the other", "2" : "They collide and stored in the same bucket", "3" : "An exception is thrown", "4" : "HashMap resizes immediately"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. Colliding keys coexist.",
                        "2" : "Correct! They go into the same bucket.",
                        "3" : "No exception.",
                        "4" : "Resize happens when load factor exceeded."
                    }
                },
                "5" : {
                    "type" : "true false",
                    "question" : "True/False: A Deque can only add and remove elements at one end.",
                    "options" : {"1" : "True", "2" : "False"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "Incorrect. Deque supports both ends.",
                        "2" : "Correct! Deque is double-ended."
                    }
                },
                "6" : {
                    "type" : "multiple choice",
                    "question" : "Which wildcard allows reading from a collection of Number or its subclasses?",
                    "options" : {"1" : "List<?>", "2" : "List<? extends Number>", "3" : "List<? super Number>", "4" : "List<Number>"},
                    "correct_responses" : ["2"],
                    "points" : 10,
                    "feedback" : {
                        "1" : "? is unbounded.",
                        "2" : "Correct! ? extends Number allows Number or subclass.",
                        "3" : "super allows Number or superclass.",
                        "4" : "Only exactly Number."
                    }
                }
            }
        }
    }
}